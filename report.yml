---
- name: Generate and email HTML patching report with unreachable/failed details
  hosts: all
  gather_facts: true
  vars:
    # Email settings
    email_subject: Patching Report - {{ inventory_hostname }}
    email_host: smtphost  # Replace with your SMTP server hostname
    email_from: system@email.com
    email_to: user@email.com

    # Report settings
    csv_path: /tmp
    csv_filename: report.csv
    headers:
      - Hostname
      - Distro Version
      - Kernel Version
      - Last Rebooted
      - Status
      - Reason (if applicable)
    template_path: templates/report.html.j2  # Replace with your template location
    jinja2_env:
      date_format: "%Y-%m-%d %H:%M:%S"  # Customize date formatting as needed

  tasks:
    - name: Gather last reboot time
      ansible.builtin.shell: last reboot | grep -m1 "" | awk '{ print $1, $6, $7, $8 }'
      register: rebooted

    - name: Save CSV headers (optional, only needed if creating a new CSV file)
      ansible.builtin.lineinfile:
        dest: "{{ csv_path }}/{{ csv_filename }}"
        line: "{{ item }}"
        create: yes
        state: present
        delegate_to: localhost
        loop: "{{ headers }}"
        when: not lookup('file', "{{ csv_path }}/{{ csv_filename }}" | default(false))

    - name: Build out CSV file with current host information and status
      ansible.builtin.lineinfile:
        dest: "{{ csv_path }}/{{ csv_filename }}"
        line: "{{ inventory_hostname }},{{ ansible_distribution_version }},{{ ansible_kernel }},{{ rebooted.stdout }},{{ hostvars[inventory_hostname]['status'] }},{{ hostvars[inventory_hostname]['reason'] }}"
        create: yes
        state: present
        delegate_to: localhost
        when: hostvars[inventory_hostname] is defined  # Skip hosts without variables set

    - name: Set unreachable/failed host details based on facts
      set_fact:
        hostvars: "{{ hostvars | combine(dict(ansible_play_hosts_all.difference(ansible_play_hosts).dict(), status='UNREACHABLE', reason='Connection failed')) }}"

    - name: Read CSV to variable (optional, if using CSV in the report)
      community.general.read_csv:
        path: "{{ csv_path }}/{{ csv_filename }}"
        register: csv_file
        delegate_to: localhost
        when: lookup('file', "{{ csv_path }}/{{ csv_filename }}" | default(false))

    - name: Template report with Jinja2
      set_fact:
        report_html: "{{ lookup('template', template_path, csv_file=csv_file.results) }}"

    - name: Send email with report (HTML and CSV attachments)
      community.general.mail:
        host: "{{ email_host }}"
        from: "{{ email_from }}"
        port: 25  # Adjust port if needed, e.g., 587 for TLS
        to: "{{ email_to }}"
        subject: "{{ email_subject }}"
        body: "{{ report_html }}"
        attach:
          - "{{ csv_path }}/{{ csv_filename }}"
          ##- "{{ template_path }}"  # Optionally attach the Jinja2 template for reference
        subtype: html
        delegate_to: localhost
